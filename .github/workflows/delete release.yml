name: 批量删除指定标签中的旧版本或全部版本

on:
  workflow_dispatch:
    inputs:
      tags_to_clean:
        description: '要清理的 Release 标签列表（用逗号分隔）'
        required: true
        default: 'ace2,acepro,ace3,ace3pro,ace3v,ace5,ace5pro,oneplus11,oneplus12,oneplus13,oneplus13t,oneplus12r,padpro'
      delete_mode:
        description: '删除模式（old_versions 或 all_versions）'
        required: true
        default: 'old_versions'
        type: choice
        options:
          - old_versions
          - all_versions

permissions:
  contents: write

jobs:
  delete-releases:
    runs-on: ubuntu-latest

    steps:
      - name: 安装 GitHub CLI 和 jq
        run: |
          sudo apt-get update
          sudo apt-get install -y gh jq

      - name: 认证 GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: 批量清理指定标签中的版本
        env:
          REPO: ${{ github.repository }}
          TAGS_TO_CLEAN: ${{ github.event.inputs.tags_to_clean }}
          DELETE_MODE: ${{ github.event.inputs.delete_mode }}
        run: |
          set -e

          echo "获取仓库 $REPO 的所有 Releases（处理分页）..."
          RELEASES=$(gh api --paginate repos/$REPO/releases | jq -r '.[] | {id: .id, tag_name: .tag_name, created_at: .created_at}')

          if [ -z "$RELEASES" ]; then
            echo "未找到任何 Releases，退出。"
            exit 0
          fi

          IFS=',' read -r -a TAG_ARRAY <<< "$TAGS_TO_CLEAN"

          for TAG in "${TAG_ARRAY[@]}"; do
            echo "处理标签: $TAG"

            TAG_RELEASES=$(echo "$RELEASES" | jq -s -r --arg TAG "$TAG" '.[] | select(.tag_name == $TAG) | .id, .created_at' | paste - - | sort -r -k2 | cut -f1)

            if [ -z "$TAG_RELEASES" ]; then
              echo "标签 $TAG 无 Releases，跳过。"
              continue
            fi

            if [ "$DELETE_MODE" == "old_versions" ]; then
              DELETE_COUNT=0
              for RELEASE_ID in $TAG_RELEASES; do
                if [ $DELETE_COUNT -ge 1 ]; then
                  echo "删除 Release ID: $RELEASE_ID (标签: $TAG)"
                  gh api -X DELETE "repos/$REPO/releases/$RELEASE_ID" || echo "删除失败，跳过"
                else
                  DELETE_COUNT=$((DELETE_COUNT + 1))
                fi
              done
            elif [ "$DELETE_MODE" == "all_versions" ]; then
              for RELEASE_ID in $TAG_RELEASES; do
                echo "删除 Release ID: $RELEASE_ID (标签: $TAG)"
                gh api -X DELETE "repos/$REPO/releases/$RELEASE_ID" || echo "删除失败，跳过"
              done
            fi
          done

          echo "指定标签中的版本清理完成。"
